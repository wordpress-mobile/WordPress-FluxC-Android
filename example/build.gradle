plugins {
    alias(sharedLibs.plugins.android.application)
    alias(sharedLibs.plugins.kotlin.android)
    alias(sharedLibs.plugins.kotlin.android.extensions)
    alias(sharedLibs.plugins.kotlin.kapt)
}

android {
    namespace "org.wordpress.android.fluxc.example"

    compileSdkVersion rootProject.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    defaultConfig {
        applicationId "org.wordpress.android.fluxc.example"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        // Don't use the test orchestrator yet, some of our connected testsare sharing state to reduce network
        // pressure on the API (authentication/fetch profile/fetch sites).
        // Uncomment the next line to enable the Orchestrator.
        // execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests.includeAndroidResources  = true
        unitTests.all {
            if (project.hasProperty('testsMaxHeapSize')) {
                // maxHeapSize for tests is not limited unless we give an explicit value
                // See https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
                maxHeapSize project.properties.get('testsMaxHeapSize')
            }
        }
    }

    lint {
        lintConfig file("${project.rootDir}/config/lint/lint.xml")
        enable += 'UnknownNullness'
    }

    buildFeatures {
        buildConfig true
        viewBinding true
    }

    sourceSets {
        // Adds exported schema location as test app assets.
        getByName("androidTest").assets.srcDirs += "$projectDir/../fluxc/schemas"
    }
}

if (["tests.properties", "tests.properties-extra"].any { file(it).exists() }) {
    throw new InvalidUserDataException("'example/tests.properties' and 'example/tests.properties-extra' property files are deprecated. Please see 'example/properties-example/README.md' for details.")
}

android.buildTypes.all { buildType ->
    // Add properties named "wp.xxx" to our BuildConfig
    Properties apiProperties = loadPropertiesOrUseExampleProperties("api.properties",
            "example app can't access WordPress.com servers")
    apiProperties.any { property ->
        if (property.key.toLowerCase().startsWith("wp.")) {
            buildType.buildConfigField "String", property.key.replace("wp.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
    }

    // Load test properties and add them to BuildConfig
    Properties testProperties = loadPropertiesOrUseExampleProperties("tests.properties",
            "tests won't pass")
    testProperties.any { property ->
        buildType.buildConfigField "String", property.key.replace(".", "_").toUpperCase(), "\"${property.value}\""
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation project(':fluxc')
    implementation project(':plugins:woocommerce')

    implementation sharedLibs.androidx.appcompat
    implementation sharedLibs.androidx.legacy.support.v4
    implementation sharedLibs.androidx.recyclerview
    implementation sharedLibs.androidx.constraintlayout
    implementation sharedLibs.androidx.annotation
    implementation sharedLibs.androidx.arch.core.common
    implementation sharedLibs.androidx.arch.core.runtime
    implementation sharedLibs.androidx.lifecycle.runtime.ktx

    implementation(sharedLibs.wordpress.utils) {
        // Using official volley package
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }

    implementation sharedLibs.google.gson

    implementation sharedLibs.androidx.room.runtime
    kapt sharedLibs.androidx.room.compiler
    implementation sharedLibs.androidx.room.ktx
    androidTestImplementation sharedLibs.androidx.room.testing

    // Dagger
    implementation sharedLibs.google.dagger
    kapt sharedLibs.google.dagger.compiler
    compileOnly sharedLibs.glassfish.javax.annotation
    implementation sharedLibs.google.dagger.android.support
    kapt sharedLibs.google.dagger.android.processor

    testImplementation sharedLibs.junit
    testImplementation sharedLibs.kotlin.test.junit
    testImplementation sharedLibs.robolectric
    testImplementation sharedLibs.androidx.test.core
    testImplementation sharedLibs.mockito.core
    testImplementation sharedLibs.mockito.kotlin
    testImplementation sharedLibs.assertj.core
    testImplementation sharedLibs.androidx.arch.core.testing

    androidTestImplementation sharedLibs.mockito.android
    androidTestImplementation sharedLibs.assertj.core
    androidTestImplementation sharedLibs.androidx.arch.core.testing
    kaptAndroidTest sharedLibs.google.dagger.compiler
    androidTestCompileOnly sharedLibs.glassfish.javax.annotation
    // Test orchestrator
    androidTestImplementation sharedLibs.androidx.test.runner
    androidTestUtil sharedLibs.androidx.test.orchestrator

    androidTestImplementation "com.goterl:lazysodium-android:5.0.2@aar"
    androidTestImplementation "net.java.dev.jna:jna:5.5.0@aar"

    // Debug dependencies
    debugImplementation sharedLibs.facebook.flipper
    debugImplementation sharedLibs.facebook.soloader
    debugImplementation sharedLibs.facebook.flipper.network.plugin

    // Coroutines
    implementation sharedLibs.kotlinx.coroutines.core
    implementation sharedLibs.kotlinx.coroutines.android

    lintChecks sharedLibs.wordpress.lint
}

def loadPropertiesOrUseExampleProperties(fileName, warningDetail) {
    Properties properties = new Properties()
    File propertiesFile = file(propertiesFilePath(fileName))
    if (propertiesFile.exists()) {
        properties.load(new InputStreamReader(new FileInputStream(propertiesFile), "utf-8"))
    } else {
        def examplePropertiesFilePath = examplePropertiesFilePath(fileName)
        logger.quiet("WARNING: you're using the '$examplePropertiesFilePath' file - $warningDetail")
        properties.load(new InputStreamReader(new FileInputStream(file(examplePropertiesFilePath)), "utf-8"))
    }
    return properties
}

def propertiesFilePath(fileName) {
    return "properties/$fileName"
}

def examplePropertiesFilePath(fileName) {
    return "properties-example/$fileName"
}

tasks.register("combineTestsPropertiesWithExtraTestsProperties") {
    doLast {
        Properties properties = new Properties()

        File testsProperties = file(propertiesFilePath("tests.properties"))
        File testsPropertiesExtra = file(propertiesFilePath("tests.properties-extra"))
        if (testsProperties.exists()) {
            properties.load(new InputStreamReader(new FileInputStream(testsProperties), "utf-8"))
        }
        if (testsPropertiesExtra.exists()) {
            properties.load(new InputStreamReader(new FileInputStream(testsPropertiesExtra), "utf-8"))
        }

        def comment = "This file is generated by combineTestsPropertiesWithExtraTestsProperties Gradle task which combines existing tests.properties file with tests.properties-extra file. It prioritizes the values in tests.properties-extra file"
        properties.store(new FileOutputStream(testsProperties), comment)
    }
}
