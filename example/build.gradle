plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "org.jetbrains.kotlin.android.extensions"
    id "org.jetbrains.kotlin.kapt"
}

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    defaultConfig {
        applicationId "org.wordpress.android.fluxc.example"
        minSdkVersion 21
        // Keep the targetSdkVersion 22 so we don't need to grant runtime permissions to the tests and the example app
        // An alternative would be granting the permissions via adb before running the test, like here:
        // https://afterecho.uk/blog/granting-marshmallow-permissions-for-testing-flavoured-builds.html
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warning 'InvalidPackage'
        disable 'ExpiredTargetSdkVersion'
    }

    testOptions {
        // Don't use the test orchestrator yet, some of our connected testsare sharing state to reduce network
        // pressure on the API (authentication/fetch profile/fetch sites).
        // Uncomment the next line to enable the Orchestrator.
        // execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests.includeAndroidResources  = true
        unitTests.all {
            if (project.hasProperty('testsMaxHeapSize')) {
                // maxHeapSize for tests is not limited unless we give an explicit value
                // See https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
                maxHeapSize project.properties.get('testsMaxHeapSize')
            }
        }
    }

    buildFeatures.viewBinding true

    sourceSets {
        // Adds exported schema location as test app assets.
        getByName("androidTest").assets.srcDirs += "$projectDir/../fluxc/schemas"
    }
}

if (["tests.properties", "tests.properties-extra"].any { file(it).exists() }) {
    throw new InvalidUserDataException("'example/tests.properties' and 'example/tests.properties-extra' property files are deprecated. Please see 'example/properties-example/README.md' for details.")
}

android.buildTypes.all { buildType ->
    // Add properties named "wp.xxx" to our BuildConfig
    Properties apiProperties = loadPropertiesOrUseExampleProperties("api.properties",
            "example app can't access WordPress.com servers")
    apiProperties.any { property ->
        if (property.key.toLowerCase().startsWith("wp.")) {
            buildType.buildConfigField "String", property.key.replace("wp.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
    }

    // Load test properties and add them to BuildConfig
    Properties testProperties = loadPropertiesOrUseExampleProperties("tests.properties",
            "tests won't pass")
    testProperties.any { property ->
        buildType.buildConfigField "String", property.key.replace(".", "_").toUpperCase(), "\"${property.value}\""
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation project(':fluxc')
    implementation project(':plugins:woocommerce')

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.annotation:annotation:1.0.2'
    implementation "androidx.arch.core:core-common:$arch_core_version"
    implementation "androidx.arch.core:core-runtime:$arch_core_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0"
    implementation 'org.apache.commons:commons-lang3:3.7'

    // WordPress libs
    implementation("org.wordpress:utils:$wordPressUtilsVersion") {
        // Using official volley package
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }

    implementation 'com.google.code.gson:gson:2.8.5'

    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$gradle.ext.kotlinVersion"
    testImplementation 'org.robolectric:robolectric:4.7.3'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "androidx.arch.core:core-testing:$arch_core_version"

    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation 'org.apache.commons:commons-lang3:3.7'
    androidTestImplementation "org.assertj:assertj-core:$assertJVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$arch_core_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    androidTestCompileOnly 'org.glassfish:javax.annotation:10.0-b28'
    // Test orchestrator
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.2.0'

    androidTestImplementation "com.goterl:lazysodium-android:5.0.2@aar"
    androidTestImplementation "net.java.dev.jna:jna:5.5.0@aar"

    // Debug dependencies
    debugImplementation 'com.facebook.flipper:flipper:0.51.0'
    debugImplementation 'com.facebook.soloader:soloader:0.9.0'
    debugImplementation ('com.facebook.flipper:flipper-network-plugin:0.51.0')

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"
}

def loadPropertiesOrUseExampleProperties(fileName, warningDetail) {
    Properties properties = new Properties()
    File propertiesFile = file(propertiesFilePath(fileName))
    if (propertiesFile.exists()) {
        properties.load(new InputStreamReader(new FileInputStream(propertiesFile), "utf-8"))
    } else {
        def examplePropertiesFilePath = examplePropertiesFilePath(fileName)
        logger.quiet("WARNING: you're using the '$examplePropertiesFilePath' file - $warningDetail")
        properties.load(new InputStreamReader(new FileInputStream(file(examplePropertiesFilePath)), "utf-8"))
    }
    return properties
}

def propertiesFilePath(fileName) {
    return "properties/$fileName"
}

def examplePropertiesFilePath(fileName) {
    return "properties-example/$fileName"
}

tasks.register("combineTestsPropertiesWithExtraTestsProperties") {
    doLast {
        Properties properties = new Properties()

        File testsProperties = file(propertiesFilePath("tests.properties"))
        File testsPropertiesExtra = file(propertiesFilePath("tests.properties-extra"))
        if (testsProperties.exists()) {
            properties.load(new InputStreamReader(new FileInputStream(testsProperties), "utf-8"))
        }
        if (testsPropertiesExtra.exists()) {
            properties.load(new InputStreamReader(new FileInputStream(testsPropertiesExtra), "utf-8"))
        }

        def comment = "This file is generated by combineTestsPropertiesWithExtraTestsProperties Gradle task which combines existing tests.properties file with tests.properties-extra file. It prioritizes the values in tests.properties-extra file"
        properties.store(new FileOutputStream(testsProperties), comment)
    }
}
