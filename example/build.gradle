buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "org.wordpress.android.fluxc.example"
        minSdkVersion 15
        // Keep the targetSdkVersion 22 so we don't need to grant runtime permissions to the tests and the example app
        // An alternative would be granting the permissions via adb before running the test, like here:
        // https://afterecho.uk/blog/granting-marshmallow-permissions-for-testing-flavoured-builds.html
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }
}

android.buildTypes.all { buildType ->
    // Add properties named "wp.xxx" to our BuildConfig
    project.properties.any { property ->
        if (property.key.toLowerCase().startsWith("wp.")) {
            buildType.buildConfigField "String", property.key.replace("wp.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
    }

    // Load test properties and add them to BuildConfig
    Properties testProperties = new Properties()
    File testFile = file("tests.properties")
    if (testFile.exists()) {
        testProperties.load(new InputStreamReader(new FileInputStream(testFile), "utf-8"))
    } else {
        // Load defaults
        println("WARNING: you're using the example example/tests.properties-example file - tests won't pass")
        testProperties.load(new InputStreamReader(new FileInputStream(file("tests.properties-example")), "utf-8"))
    }
    testProperties.any { property ->
        buildType.buildConfigField "String", property.key.replace(".", "_").toUpperCase(), "\"${property.value}\""
    }
}

dependencies {
    implementation project(':fluxc');

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"

    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"

    // WordPress libs
    implementation ('org.wordpress:utils:1.16.0') {
        // Using official volley package
        exclude group: "com.mcxiaoke.volley";
    }

    // Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.robolectric:robolectric:3.0'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'org.mockito:mockito-core:1.10.19'
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    androidTestCompileOnly 'org.glassfish:javax.annotation:10.0-b28'

    // Debug dependencies
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    // Test orchestrator
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestUtil 'com.android.support.test:orchestrator:1.0.1'
}
